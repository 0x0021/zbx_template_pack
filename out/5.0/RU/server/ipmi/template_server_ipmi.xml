<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
   <version>5.0</version>
   <date>2015-12-30T14:41:30Z</date>
   <groups>
      <group>
         <name>Templates/Server hardware</name>
      </group>
   </groups>
   <templates>
      <template>
         <template>Template Server by IPMI</template>
         <name>Template Server by IPMI</name>
         <description>Template tooling version used: 0.35</description>
         <groups>
            <group>
               <name>Templates/Server hardware</name>
            </group>
         </groups>
         <applications>
            <application>
               <name>General</name>
            </application>
            <application>
               <name>Zabbix raw items</name>
            </application>
         </applications>
         <items>
            <item>
               <name>Get IPMI sensors</name>
               <type>IPMI</type>
               <key>ipmi.get</key>
               <history>1h</history>
               <trends>0</trends>
               <value_type>TEXT</value_type>
               <applications>
                  <application>
                     <name>Zabbix raw items</name>
                  </application>
               </applications>
            </item>
         </items>
         <discovery_rules>
            <discovery_rule>
               <name>Discrete sensors discovery</name>
               <type>DEPENDENT</type>
               <key>ipmi.discrete.discovery</key>
               <delay>0</delay>
               <filter>
                  <evaltype>AND</evaltype>
                  <conditions>
                     <condition>
                        <macro>{#SENSOR_READING_TYPE}</macro>
                        <value>threshold</value>
                        <operator>NOT_MATCHES_REGEX</operator>
                        <formulaid>A</formulaid>
                     </condition>
                     <condition>
                        <macro>{#SENSOR_TYPE}</macro>
                        <value>{$IPMI.SENSOR_TYPE.MATCHES}</value>
                        <formulaid>B</formulaid>
                     </condition>
                     <condition>
                        <macro>{#SENSOR_TYPE}</macro>
                        <value>{$IPMI.SENSOR_TYPE.NOT_MATCHES}</value>
                        <operator>NOT_MATCHES_REGEX</operator>
                        <formulaid>C</formulaid>
                     </condition>
                  </conditions>
               </filter>
               <item_prototypes>
                  <item_prototype>
                     <name>IPMI: {#SENSOR_ID}</name>
                     <type>DEPENDENT</type>
                     <key>ipmi.state_text[{#SENSOR_ID}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <trends>0</trends>
                     <value_type>CHAR</value_type>
                     <application_prototypes>
                        <application_prototype>
                           <name>IPMI {#SENSOR_TYPE}</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.[?(@.id=='{#SENSOR_ID}')].state.text.first()</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>1d</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>ipmi.get</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{diff()}&lt;1</expression>
                           <name>IPMI: {#SENSOR_ID} last value differs from the previous value</name>
                           <priority>INFO</priority>
                           <manual_close>YES</manual_close>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <master_item>
                  <key>ipmi.get</key>
               </master_item>
               <lld_macro_paths>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_ID}</lld_macro>
                     <path>$.id</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_READING_TYPE}</lld_macro>
                     <path>$.reading.text</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_TYPE}</lld_macro>
                     <path>$.sensor.text</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_UNIT}</lld_macro>
                     <path>$.units</path>
                  </lld_macro_path>
               </lld_macro_paths>
            </discovery_rule>
            <discovery_rule>
               <name>Threshold sensors discovery</name>
               <type>DEPENDENT</type>
               <key>ipmi.sensors.discovery</key>
               <delay>0</delay>
               <filter>
                  <evaltype>AND</evaltype>
                  <conditions>
                     <condition>
                        <macro>{#SENSOR_READING_TYPE}</macro>
                        <value>threshold</value>
                        <formulaid>A</formulaid>
                     </condition>
                     <condition>
                        <macro>{#SENSOR_TYPE}</macro>
                        <value>{$IPMI.SENSOR_TYPE.MATCHES}</value>
                        <formulaid>B</formulaid>
                     </condition>
                     <condition>
                        <macro>{#SENSOR_TYPE}</macro>
                        <value>{$IPMI.SENSOR_TYPE.NOT_MATCHES}</value>
                        <operator>NOT_MATCHES_REGEX</operator>
                        <formulaid>C</formulaid>
                     </condition>
                  </conditions>
               </filter>
               <item_prototypes>
                  <item_prototype>
                     <name>IPMI: {#SENSOR_ID}, {#SENSOR_UNIT}</name>
                     <type>DEPENDENT</type>
                     <key>ipmi.value[{#SENSOR_ID}]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <value_type>FLOAT</value_type>
                     <application_prototypes>
                        <application_prototype>
                           <name>IPMI {#SENSOR_TYPE}</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$.[?(@.id=='{#SENSOR_ID}')].value.first()</params>
                        </step>
                        <step>
                           <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                           <params>1h</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>ipmi.get</key>
                     </master_item>
                     <trigger_prototypes>
                        <trigger_prototype>
                           <expression>{min(5m)}&lt;{#SENSOR_LO_WARN}</expression>
                           <name>IPMI: {#SENSOR_ID} value is low (over {#SENSOR_LO_WARN} for 5m)</name>
                           <priority>WARNING</priority>
                           <dependencies>
                              <dependency>
                                 <name>IPMI: {#SENSOR_ID} value is critically low (over {#SENSOR_LO_DISAST} for 5m)</name>
                                 <expression>{Template Server by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&lt;{#SENSOR_LO_DISAST}</expression>
                              </dependency>
                              <dependency>
                                 <name>IPMI: {#SENSOR_ID} value is too low (over {#SENSOR_LO_CRIT} for 5m)</name>
                                 <expression>{Template Server by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&lt;{#SENSOR_LO_CRIT}</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{min(5m)}&lt;{#SENSOR_LO_CRIT}</expression>
                           <name>IPMI: {#SENSOR_ID} value is too low (over {#SENSOR_LO_CRIT} for 5m)</name>
                           <priority>HIGH</priority>
                           <dependencies>
                              <dependency>
                                 <name>IPMI: {#SENSOR_ID} value is critically low (over {#SENSOR_LO_DISAST} for 5m)</name>
                                 <expression>{Template Server by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&lt;{#SENSOR_LO_DISAST}</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{min(5m)}&lt;{#SENSOR_LO_DISAST}</expression>
                           <name>IPMI: {#SENSOR_ID} value is critically low (over {#SENSOR_LO_DISAST} for 5m)</name>
                           <priority>DISASTER</priority>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{min(5m)}&gt;{#SENSOR_HI_WARN}</expression>
                           <name>IPMI: {#SENSOR_ID} value is high (over {#SENSOR_HI_WARN} for 5m)</name>
                           <priority>WARNING</priority>
                           <dependencies>
                              <dependency>
                                 <name>IPMI: {#SENSOR_ID} value is critically high (over {#SENSOR_HI_DISAST} for 5m)</name>
                                 <expression>{Template Server by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&gt;{#SENSOR_HI_DISAST}</expression>
                              </dependency>
                              <dependency>
                                 <name>IPMI: {#SENSOR_ID} value is too high (over {#SENSOR_HI_CRIT} for 5m)</name>
                                 <expression>{Template Server by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&gt;{#SENSOR_HI_CRIT}</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{min(5m)}&gt;{#SENSOR_HI_CRIT}</expression>
                           <name>IPMI: {#SENSOR_ID} value is too high (over {#SENSOR_HI_CRIT} for 5m)</name>
                           <priority>HIGH</priority>
                           <dependencies>
                              <dependency>
                                 <name>IPMI: {#SENSOR_ID} value is critically high (over {#SENSOR_HI_DISAST} for 5m)</name>
                                 <expression>{Template Server by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}&gt;{#SENSOR_HI_DISAST}</expression>
                              </dependency>
                           </dependencies>
                        </trigger_prototype>
                        <trigger_prototype>
                           <expression>{min(5m)}&gt;{#SENSOR_HI_DISAST}</expression>
                           <name>IPMI: {#SENSOR_ID} value is critically high (over {#SENSOR_HI_DISAST} for 5m)</name>
                           <priority>DISASTER</priority>
                        </trigger_prototype>
                     </trigger_prototypes>
                  </item_prototype>
               </item_prototypes>
               <graph_prototypes>
                  <graph_prototype>
                     <name>IPMI: {#SENSOR_ID}</name>
                     <graph_items>
                        <graph_item>
                           <color>1A7C11</color>
                           <item>
                              <host>Template Server by IPMI</host>
                              <key>ipmi.value[{#SENSOR_ID}]</key>
                           </item>
                        </graph_item>
                     </graph_items>
                  </graph_prototype>
               </graph_prototypes>
               <master_item>
                  <key>ipmi.get</key>
               </master_item>
               <lld_macro_paths>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_ID}</lld_macro>
                     <path>$.id</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_READING_TYPE}</lld_macro>
                     <path>$.reading.text</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_TYPE}</lld_macro>
                     <path>$.sensor.text</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_UNIT}</lld_macro>
                     <path>$.units</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_LO_WARN}</lld_macro>
                     <path>$.threshold.lower.non_crit</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_LO_CRIT}</lld_macro>
                     <path>$.threshold.lower.crit</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_LO_DISAST}</lld_macro>
                     <path>$.threshold.lower.non_recover</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_HI_WARN}</lld_macro>
                     <path>$.threshold.upper.non_crit</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_HI_CRIT}</lld_macro>
                     <path>$.threshold.upper.crit</path>
                  </lld_macro_path>
                  <lld_macro_path>
                     <lld_macro>{#SENSOR_HI_DISAST}</lld_macro>
                     <path>$.threshold.upper.non_recover</path>
                  </lld_macro_path>
               </lld_macro_paths>
            </discovery_rule>
         </discovery_rules>
         <macros>
            <macro>
               <macro>{$IPMI.SENSOR_TYPE.MATCHES}</macro>
               <value>.*</value>
               <description>This macro is used in sensors discovery. Can be overridden on the host or linked template level.</description>
            </macro>
            <macro>
               <macro>{$IPMI.SENSOR_TYPE.NOT_MATCHES}</macro>
               <value>invalid</value>
               <description>This macro is used in sensors discovery. Can be overridden on the host or linked template level.</description>
            </macro>
         </macros>
      </template>
   </templates>
</zabbix_export>
