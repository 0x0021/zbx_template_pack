---
value_maps:
  - name: Service state
    mappings:
      - value: "0"
        newvalue: Down
      - value: "1"
        newvalue: Up

templates:
  - name: Template App HAProxy by Zabbix agent
    _zbx_ver: "4.4"
    _classes:
      - APP
    description: |
      Get metrics from status page using Zabbix agent
      https://www.haproxy.com/blog/exploring-the-haproxy-stats-page/.
      Example configuration of HAProxy:        
        frontend stats
            bind *:8404
            stats enable
            stats uri /stats
            stats refresh 10s

    _documentation:
      _zabbix_forum_url: https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/
      _tested_on:
        - name: HAProxy
          version: "1.8"
        - name: Zabbix
          version: "4.4"
      _overview: |
        The template to monitor HAProxy by Zabbix that work without any external scripts.
        Most of the metrics are collected in one go, thanks to Zabbix bulk data collection.

        `Template App HAProxy by Zabbix agent` collects metrics by polling [HAProxy Stats Page](https://www.haproxy.com/blog/exploring-the-haproxy-stats-page/)  with Zabbix agent:

        Note that this solution supports https and redirects.
      _setup: |
        Setup [HAProxy Stats Page](https://www.haproxy.com/blog/exploring-the-haproxy-stats-page/).

        Example configuration of HAProxy:        
        ```text
        frontend stats
            bind *:8404
            stats enable
            stats uri /stats
            stats refresh 10s
        ```

        If you use another location, don't forget to change the macros {$HAPROXY.STATS.SCHEME},{$HAPROXY.STATS.PORT},{$HAPROXY.STATS.PATH}.
    items:
      - _prototype: haproxy.get
        type: ZABBIX_PASSIVE
        key: web.page.get["{$HAPROXY.STATS.SCHEME}://{HOST.CONN}:{$HAPROXY.STATS.PORT}/{$HAPROXY.STATS.PATH};csv"]
      - _prototype: haproxy.get_html
        type: ZABBIX_PASSIVE
        key: web.page.get["{$HAPROXY.STATS.SCHEME}://{HOST.CONN}:{$HAPROXY.STATS.PORT}/{$HAPROXY.STATS.PATH}"]
      - _prototype: haproxy.version
      - _prototype: haproxy.uptime
      - _id: haproxy.ping
        name: Service status
        type: ZABBIX_PASSIVE
        key: net.tcp.service["{$HAPROXY.STATS.SCHEME}","{HOST.CONN}","{$HAPROXY.STATS.PORT}"]
        value_type: UNSIGNED
        delay: 1m
        value_map: Service state
        history: 7d
        _group: "HAProxy"
        _resource: HAProxy
        preprocessing:
          - type: DISCARD_UNCHANGED_HEARTBEAT
            params: "10m"
        triggers:
          - _id: trigger.status
            name: Service is down
            expression: "{TEMPLATE_NAME:METRIC.last()}=0"
            manual_close: "YES"
            priority: AVERAGE
            # _depends_on:
            #   - trigger.proc.not_running
      - _id: haproxy.perf
        name: Service response time
        type: ZABBIX_PASSIVE
        key: net.tcp.service.perf["{$HAPROXY.STATS.SCHEME}","{HOST.CONN}","{$HAPROXY.STATS.PORT}"]
        value_type: FLOAT
        delay: 1m
        history: 7d
        units: s
        _group: HAProxy
        _resource: HAProxy
        triggers:
          - _id: trigger.perf.low
            name: Service response time is too high (over {$HAPROXY.RESPONSE_TIME.MAX.WARN}s for 5m)
            expression: "{TEMPLATE_NAME:METRIC.min(5m)}>{$HAPROXY.RESPONSE_TIME.MAX.WARN}"
            manual_close: "YES"
            priority: WARNING
            _depends_on:
              # - trigger.proc.not_running
              - trigger.status
      # - _prototype: haproxy.version
    discovery_rules:
      - name: BACKEND discovery
        description: |-
          Discovery backends
        key: haproxy.backend.discovery
        type: DEPENDENT
        masterItem: haproxy.get
        lld_macro_paths:
          - lld_macro: "{#PXNAME}"
            path: $.pxname
          - lld_macro: "{#SVNAME}"
            path: $.svname
        filter:
          evalType: AND
          conditions:
            - macro: "{#SVNAME}"
              value: BACKEND
              operator: MATCHES_REGEX
              formulaid: A
        items:
          - _prototype: haproxy.backend.status
          - _prototype: haproxy.backend.rtime
          - _prototype: haproxy.backend.econ.rate
          - _prototype: haproxy.backend.dresp.rate
          - _prototype: haproxy.backend.eresp.rate
          - _prototype: haproxy.backend.qcur
          - _prototype: haproxy.backend.qtime
          - _prototype: haproxy.backend.wredis.rate
          - _prototype: haproxy.backend.wretr.rate
      - name: FRONTEND discovery
        description: |-
          Discovery frontends
        key: haproxy.frontend.discovery
        type: DEPENDENT
        masterItem: haproxy.get
        lld_macro_paths:
          - lld_macro: "{#PXNAME}"
            path: $.pxname
          - lld_macro: "{#SVNAME}"
            path: $.svname
        filter:
          evalType: AND
          conditions:
            - macro: "{#SVNAME}"
              value: FRONTEND
              operator: MATCHES_REGEX
              formulaid: A
        items:
          # - _prototype: haproxy.frontend.status
          - _prototype: haproxy.frontend.req_rate
          - _prototype: haproxy.frontend.rate
          - _prototype: haproxy.frontend.scur
          - _prototype: haproxy.frontend.slim
          - _prototype: haproxy.frontend.sutil
          - _prototype: haproxy.frontend.ereq.rate
          - _prototype: haproxy.frontend.dreq.rate
          - _prototype: haproxy.frontend.hrsp_1xx.rate
          - _prototype: haproxy.frontend.hrsp_2xx.rate
          - _prototype: haproxy.frontend.hrsp_3xx.rate
          - _prototype: haproxy.frontend.hrsp_4xx.rate
          - _prototype: haproxy.frontend.hrsp_5xx.rate
          - _prototype: haproxy.frontend.bin.rate
          - _prototype: haproxy.frontend.bout.rate
      - name: Servers discovery
        description: |-
          Discovery Servers
        key: haproxy.server.discovery
        type: DEPENDENT
        masterItem: haproxy.get
        lld_macro_paths:
          - lld_macro: "{#PXNAME}"
            path: $.pxname
          - lld_macro: "{#SVNAME}"
            path: $.svname
        filter:
          evalType: AND
          conditions:
            - macro: "{#SVNAME}"
              value: FRONTEND|BACKEND
              operator: NOT_MATCHES_REGEX
              formulaid: A
        items:
          - _prototype: haproxy.server.status
          - _prototype: haproxy.server.rtime
          - _prototype: haproxy.server.econ.rate
          - _prototype: haproxy.server.dresp.rate
          - _prototype: haproxy.server.eresp.rate
          - _prototype: haproxy.server.qcur
          - _prototype: haproxy.server.qtime
          - _prototype: haproxy.server.wredis.rate
          - _prototype: haproxy.server.wretr.rate
          - _prototype: haproxy.server.hrsp_4xx.rate
          - _prototype: haproxy.server.hrsp_5xx.rate

    macros:
      - macro: "{$HAPROXY.STATS.SCHEME}"
        _description: "The scheme of HAProxy stats page(http/https)."
        value: "http"
      - macro: "{$HAPROXY.STATS.PORT}"
        _description: "The port of the HAProxy stats host or container."
        value: "8404"
      - macro: "{$HAPROXY.STATS.PATH}"
        _description: "The path of HAProxy stats page."
        value: "stats"
      - macro: "{$HAPROXY.RESPONSE_TIME.MAX.WARN}"
        _description: "The HAProxy stats page maximum response time in seconds for trigger expression."
        value: "10s"
      - macro: "{$HAPROXY.FRONT_DREQ.MAX.WARN}"
        _description: "The HAProxy maximum denied requests for trigger expression."
        value: "10"
      - macro: "{$HAPROXY.FRONT_EREQ.MAX.WARN}"
        _description: "The HAProxy maximum number of request errors for trigger expression."
        value: "10"
      - macro: "{$HAPROXY.BACK_QCUR.MAX.WARN}"
        _description: "Maximum number of requests on BACKEND unassigned in queue for trigger expression."
        value: "10"
      - macro: "{$HAPROXY.BACK_RTIME.MAX.WARN}"
        _description: "Maximum of average BACKEND response time for trigger expression."
        value: "10s"
      - macro: "{$HAPROXY.BACK_QTIME.MAX.WARN}"
        _description: "Maximum of average time spent in queue on BACKEND for trigger expression."
        value: "10s"
      - macro: "{$HAPROXY.BACK_ERESP.MAX.WARN}"
        _description: "Maximum of responses with error on BACKEND for trigger expression."
        value: "10"
      - macro: "{$HAPROXY.SERVER_QCUR.MAX.WARN}"
        _description: "Maximum number of requests on server unassigned in queue for trigger expression."
        value: "10"
      - macro: "{$HAPROXY.SERVER_RTIME.MAX.WARN}"
        _description: "Maximum of average server response time for trigger expression."
        value: "10s"
      - macro: "{$HAPROXY.SERVER_QTIME.MAX.WARN}"
        _description: "Maximum of average time spent in queue on server for trigger expression."
        value: "10s"
      - macro: "{$HAPROXY.SERVER_ERESP.MAX.WARN}"
        _description: "Maximum of responses with error on server for trigger expression."
        value: "10"
      - macro: "{$HAPROXY.FRONT_SUTIL.MAX.WARN}"
        _description: "Maximum of session usage percentage on frontend for trigger expression."
        value: "80%"
    # screens:
    #   - name: "HAProxy performance"
    #     hsize: 2
    #     vsize: 2
    #     screen_items:
    #       - _graph_id: haproxy.connections
    #         x: 0
    #         y: 0
    #       - _graph_id: haproxy.requests
    #         x: 1
    #         y: 0
    #       - _graph_id: haproxy.connections.rate
    #         x: 0
    #         y: 1
