{
    "templates": [
        {
            "name": "Template OS Linux by Prom",
            "classes": [
                "OS",
                "PERFORMANCE",
                "IF_MIB"
            ],
            "_zbx_ver": "4.2",
            "description": "Official Linux template using node exporter.",
            "_documentation": {
                "_overview": "This template collects Linux metrics from node_exporter 0.18 and above. Support for older node_exporter versions is provided as 'best effort'.",
                "_setup": "Please refer to the node_exporter docs. Use node_exporter v0.18.0 or above.",
                "_issues": [
                    {
                        "version": "below 0.16.0",
                        "description": "node_exporter v0.16.0 renamed many metrics. CPU utilisation for 'guest' and 'guest_nice' metrics are not supported in this template with node_exporter < 0.16. Disk IO metrics are not supported. Other metrics provided as 'best effort'.  \n See https://github.com/prometheus/node_exporter/releases/tag/v0.16.0 for details."
                    },
                    {
                        "version": "below 0.18",
                        "description": "metric node_network_info with label 'device' cannot be found, so network discovery is not possible."
                    }
                ],
                "_tested_on": [
                    {
                        "name": "node_exporter",
                        "version": "0.17.0"
                    },
                    {
                        "name": "node_exporter",
                        "version": "0.18.1"
                    }
                ],
                "_ref": "https://github.com/prometheus/node_exporter"
            },
            "macros": [
                {
                    "macro": "{$LOAD_AVG_PER_CPU.MAX.WARN}",
                    "value": "1.5",
                    "_description": "Load per CPU considered sustainable. Tune if needed."
                },
                {
                    "macro": "{$NODE_EXPORTER_PORT}",
                    "_description": "TCP Port node_exporter is listening on.",
                    "value": "9100"
                },
                {
                    "macro": "{$VFS.DEV.READ.AWAIT.WARN}",
                    "value": "20",
                    "_description": "Disk read average response time (in ms) before the trigger would fire"
                },
                {
                    "macro": "{$VFS.DEV.WRITE.AWAIT.WARN}",
                    "value": "20",
                    "_description": "Disk write average response time (in ms) before the trigger would fire"
                },
                {
                    "macro": "{$VFS.DEV.DEVNAME.NOT_MATCHES}",
                    "value": "(loop[0-9]*|sd[a-z][0-9]+|nbd[0-9]+|sr[0-9]+|fd[0-9]+|dm-[0-9]+)",
                    "_description": "This macro is used in block devices discovery. Can be overridden on the host or linked template level"
                },
                {
                    "macro": "{$VFS.DEV.DEVNAME.MATCHES}",
                    "value": ".+",
                    "_description": "This macro is used in block devices discovery. Can be overridden on the host or linked template level"
                },
                {
                    "macro": "{$VFS.FS.FSNAME.NOT_MATCHES}",
                    "value": "^(/dev|/sys|/run|/proc|.+/shm$)",
                    "_description": "This macro is used in filesystems discovery. Can be overridden on the host or linked template level"
                },
                {
                    "macro": "{$VFS.FS.FSNAME.MATCHES}",
                    "value": ".+",
                    "_description": "This macro is used in filesystems discovery. Can be overridden on the host or linked template level"
                },
                {
                    "macro": "{$VFS.FS.FSTYPE.MATCHES}",
                    "value": "^(btrfs|ext2|ext3|ext4|reiser|xfs|ffs|ufs|jfs|jfs2|vxfs|hfs|apfs|refs|ntfs|fat32|zfs)$",
                    "_description": "This macro is used in filesystems discovery. Can be overridden on the host or linked template level"
                },
                {
                    "macro": "{$VFS.FS.FSTYPE.NOT_MATCHES}",
                    "value": "^\\s$",
                    "_description": "This macro is used in filesystems discovery. Can be overridden on the host or linked template level"
                },
                {
                    "macro": "{$VFS.FS.FSDEVICE.MATCHES}",
                    "value": "^.+$",
                    "_description": "This macro is used in filesystems discovery. Can be overridden on the host or linked template level"
                },
                {
                    "macro": "{$VFS.FS.FSDEVICE.NOT_MATCHES}",
                    "value": "^\\s$",
                    "_description": "This macro is used in filesystems discovery. Can be overridden on the host or linked template level"
                },
                {
                    "macro": "{$MEMORY.UTIL.MAX}",
                    "value": "90"
                },
                {
                    "macro": "{$MEMORY.AVAILABLE.MIN}",
                    "value": "20M"
                },
                // network interfaces
                {
                    "macro": "{$NET.IF.IFNAME.MATCHES}",
                    "value": "^.*$"
                },
                {
                    "macro": "{$NET.IF.IFNAME.NOT_MATCHES}",
                    "value": "(^Software Loopback Interface|^NULL[0-9.]*$|^[Ll]o[0-9.]*$|^[Ss]ystem$|^Nu[0-9.]*$|^veth[0-9a-z]+$|docker[0-9]+|br-[a-z0-9]{12})",
                    "_description": "Filter out loopbacks, nulls, docker veth links and docker0 bridge by default"
                },
                {
                    "macro": "{$NET.IF.IFOPERSTATUS.MATCHES}",
                    "value": "^.*$"
                },
                {
                    "macro": "{$NET.IF.IFOPERSTATUS.NOT_MATCHES}",
                    "value": "^7$",
                    "_description": "Ignore notPresent(7)"
                },
                {
                    "macro": "{$NET.IF.IFALIAS.MATCHES}",
                    "value": "^.*$"
                },
                {
                    "macro": "{$NET.IF.IFALIAS.NOT_MATCHES}",
                    "value": "CHANGE_IF_NEEDED"
                }
            ],
            "discovery_rules": [
                {
                    "name": "Network interface discovery",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "net.if.discovery[node_exporter]",
                    "description": "Discovery of network interfaces. Requires node_exporter v0.18 and up.",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_network_info$\"}"
                        }
                    ],
                    "lld_macro_paths": [
                        {
                            "lld_macro": "{#IFNAME}",
                            "path": "$.labels.device"
                        },
                        {
                            "lld_macro": "{#HELP}",
                            "path": "$.help"
                        },
                        {
                            "lld_macro": "{#IFALIAS}",
                            "path": "$.labels.ifalias"
                        },
                        {
                            "lld_macro": "{#IFOPERSTATUS}",
                            "path": "$.labels.operstate"
                        }
                    ],
                    "filter": {
                        "evaltype": "AND",
                        "conditions": [
                            {
                                "macro": "{#IFNAME}",
                                "value": "{$NET.IF.IFNAME.MATCHES}",
                                "operator": "MATCHES_REGEX",
                                "formulaid": "A"
                            },
                            {
                                "macro": "{#IFNAME}",
                                "value": "{$NET.IF.IFNAME.NOT_MATCHES}",
                                "operator": "NOT_MATCHES_REGEX",
                                "formulaid": "B"
                            },
                            {
                                "macro": "{#IFALIAS}",
                                "value": "{$NET.IF.IFALIAS.MATCHES}",
                                "operator": "MATCHES_REGEX",
                                "formulaid": "C"
                            },
                            {
                                "macro": "{#IFALIAS}",
                                "value": "{$NET.IF.IFALIAS.NOT_MATCHES}",
                                "operator": "NOT_MATCHES_REGEX",
                                "formulaid": "D"
                            },
                            {
                                "macro": "{#IFOPERSTATUS}",
                                "value": "{$NET.IF.IFOPERSTATUS.MATCHES}",
                                "operator": "MATCHES_REGEX",
                                "formulaid": "E"
                            },
                            {
                                "macro": "{#IFOPERSTATUS}",
                                "value": "{$NET.IF.IFOPERSTATUS.NOT_MATCHES}",
                                "operator": "NOT_MATCHES_REGEX",
                                "formulaid": "F"
                            }
                        ]
                    },
                    "items": [
                        {
                            "_prototype": "net.if.in",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.in[node_exporter,\"{#IFNAME}\"]",
                            "_vendor_description": "",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_receive_bytes_total{device=\"{#IFNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                },
                                {
                                    "type": "MULTIPLIER",
                                    "params": "8"
                                }
                            ]
                        },
                        {
                            "_prototype": "net.if.out",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.out[node_exporter,\"{#IFNAME}\"]",
                            "_vendor_description": "",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_transmit_bytes_total{device=\"{#IFNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                },
                                {
                                    "type": "MULTIPLIER",
                                    "params": "8"
                                }
                            ]
                        },
                        {
                            "_prototype": "net.if.out.errors",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.out.errors[node_exporter\"{#IFNAME}\"]",
                            "_vendor_description": "",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_transmit_errs_total{device=\"{#IFNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ]
                        },
                        {
                            "_prototype": "net.if.in.errors",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.in.errors[node_exporter,\"{#IFNAME}\"]",
                            "_vendor_description": "",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_receive_errs_total{device=\"{#IFNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ]
                        },
                        {
                            "_prototype": "net.if.in.discards",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.in.discards[node_exporter,\"{#IFNAME}\"]",
                            "_vendor_description": "",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_receive_drop_total{device=\"{#IFNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ]
                        },
                        {
                            "_prototype": "net.if.out.discards",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.out.discards[node_exporter,\"{#IFNAME}\"]",
                            "_vendor_description": "",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_transmit_drop_total{device=\"{#IFNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ]
                        },
                        {
                            "_prototype": "net.if.speed",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.speed[node_exporter,\"{#IFNAME}\"]",
                            "_vendor_description": "",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_speed_bytes{device=\"{#IFNAME}\"}\r\n"
                                },
                                {
                                    "type": "MULTIPLIER",
                                    "params": "8"
                                }
                            ]
                        },
                        {
                            "_prototype": "net.if.type",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.type[node_exporter,\"{#IFNAME}\"]",
                            "_vendor_description": "node_network_protocol_type protocol_type value of /sys/class/net/<iface>.",
                            "value_map": "Linux::Interface protocol types",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_protocol_type{device=\"{#IFNAME}\"}\r\n"
                                }
                            ],
                            "triggers": [
                                {
                                    "_prototype": "trigger.if.speed.not_max",
                                    "expression": "{TEMPLATE_NAME:METRIC.change()}<0 and {TEMPLATE_NAME:METRIC.last()}>0\nand\n({TEMPLATE_NAME:__net.if.type__.last()}=6\nor {TEMPLATE_NAME:__net.if.type__.last()}=1)\nand\n({TEMPLATE_NAME:__net.if.status__.last()}<>2)",
                                }
                            ]
                        },
                        {
                            "_prototype": "net.if.status",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "net.if.status[node_exporter,\"{#IFNAME}\"]",
                            "_vendor_description": "Indicates the interface RFC2863 operational state as a string.\nPossible values are:\"unknown\", \"notpresent\", \"down\", \"lowerlayerdown\", \"testing\",\"dormant\", \"up\".",
                            "_ref": "https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-net",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_network_info{device=\"{#IFNAME}\"}\r\noperstate"
                                },
                                /*
                                var newvalue;
                                switch(value) {
                                case "up":
                                    newvalue = 1;
                                    break;
                                case "down":
                                    newvalue = 2;
                                    break;
                                case "testing":
                                    newvalue = 4;
                                    break;
                                case "unknown":
                                    newvalue = 5;
                                    break;
                                case "dormant":
                                    newvalue = 6;
                                    break;
                                case "notPresent":
                                    newvalue = 7;
                                    break;
                                default:
                                    newvalue = "Problem parsing interface operstate in JS";
                                }
                                return newvalue;
                                */
                                {
                                    "type": "JAVASCRIPT",
                                    "params": "var newvalue;\nswitch(value) {\n  case \"up\":\n    newvalue = 1;\n    break;\n  case \"down\":\n    newvalue = 2;\n    break;\n  case \"testing\":\n    newvalue = 4;\n    break;\n  case \"unknown\":\n    newvalue = 5;\n    break;\n  case \"dormant\":\n    newvalue = 6;\n    break;\n  case \"notPresent\":\n    newvalue = 7;\n    break;\n  default:\n    newvalue = \"Problem parsing interface operstate in JS\";\n}\nreturn newvalue;"
                                }
                            ]
                        }
                    ],
                },
                // {
                //     "name": "CPU discovery",
                //     "master_item": "node_exporter.get",
                //     "type": "DEPENDENT",
                //     "key": "system.cpu.discovery[node_exporter]",
                //     "preprocessing": [
                //         {
                //             "type": "PROMETHEUS_TO_JSON",
                //             "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"idle\"}"
                //         }
                //     ],
                //     "lld_macro_paths": [
                //         {
                //             "lld_macro": "{#CPU.NUMBER}",
                //             "path": "$.labels.cpu"
                //         },
                //         {
                //             "lld_macro": "{#HELP}",
                //             "path": "$.help"
                //         }
                //     ],
                //     "items": [
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.util",
                //             "type": "DEPENDENT",
                //             "master_item": "system.cpu.idle",
                //             "key": "system.cpu.util[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "JAVASCRIPT",
                //                     "params": "//Calculate utilization\nreturn (100 - value)"
                //                 },
                //             ],
                //             "triggers": []
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.idle",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.idle[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=\"idle\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.system",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.system[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=\"system\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.user",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.user[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=\"user\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.steal",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.steal[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=\"steal\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.softirq",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.softirq[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=\"softirq\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.nice",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.nice[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=\"nice\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.iowait",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.iowait[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=\"iowait\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.interrupt",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.interrupt[node_exporter,\"{#CPU.NUMBER}\"]",
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=\"irq\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.guest",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.guest[node_exporter,\"{#CPU.NUMBER}\"]",
                //             // this metric is only supported for 0.16.0 or above
                //             // node_cpu{cpu=""cpu0"",mode="guest"} 0 (pre 0.16.0)
                //             // node_cpu_guest_seconds_total{cpu="1",mode="user"} 0 (after 0.16.0)
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_guest_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=~\"^(?:user|guest)$\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         },
                //         {
                //             "_resource": "#{#CPU.NUMBER}",
                //             "_prototype": "system.cpu.guest_nice",
                //             "type": "DEPENDENT",
                //             "master_item": "node_exporter.get",
                //             "key": "system.cpu.guest_nice[node_exporter,\"{#CPU.NUMBER}\"]",
                //             // this metric is only supported for 0.16.0 or above
                //             // node_cpu{cpu=""cpu0"",mode="guest_nice} 0 (pre 0.16.0)
                //             // node_cpu_guest_seconds_total{cpu="1",mode="nice"} 0 (after 0.16.0)
                //             "preprocessing": [
                //                 {
                //                     "type": "PROMETHEUS_PATTERN",
                //                     "params": "{__name__=~\"^node_cpu(?:_guest_seconds_total)?$\",cpu=\"{#CPU.NUMBER}\",mode=~\"^(?:nice|guest_nice)$\"}\r\n"
                //                 },
                //                 {
                //                     "type": "CHANGE_PER_SECOND"
                //                 },
                //                 {
                //                     "type": "MULTIPLIER",
                //                     "params": "100"
                //                 }
                //             ]
                //         }
                //     ]
                // },
                {
                    "name": "Mounted filesystem discovery",
                    "key": "vfs.fs.discovery[node_exporter]",
                    "description": "Discovery of file systems of different types.",
                    "master_item": "node_exporter.get",
                    "type": "DEPENDENT",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_filesystem_size(?:_bytes)?$\", mountpoint=~\".+\"}"
                        }
                    ],
                    "lld_macro_paths": [
                        {
                            "lld_macro": "{#FSTYPE}",
                            "path": "$.labels.fstype"
                        },
                        {
                            "lld_macro": "{#FSNAME}",
                            "path": "$.labels.mountpoint"
                        },
                        //optional macros, not currently in use
                        {
                            "lld_macro": "{#FSDEVICE}",
                            "path": "$.labels.device"
                        },
                        {
                            "lld_macro": "{#HELP}",
                            "path": "$.help"
                        }
                    ],
                    "filter": {
                        "evaltype": "AND",
                        "conditions": [
                            {
                                "macro": "{#FSTYPE}",
                                "value": "{$VFS.FS.FSTYPE.MATCHES}",
                                "operator": "MATCHES_REGEX",
                                "formulaid": "A"
                            },
                            {
                                "macro": "{#FSTYPE}",
                                "value": "{$VFS.FS.FSTYPE.NOT_MATCHES}",
                                "operator": "NOT_MATCHES_REGEX",
                                "formulaid": "B"
                            },
                            {
                                "macro": "{#FSNAME}",
                                "value": "{$VFS.FS.FSNAME.MATCHES}",
                                "operator": "MATCHES_REGEX",
                                "formulaid": "C"
                            },
                            {
                                "macro": "{#FSNAME}",
                                "value": "{$VFS.FS.FSNAME.NOT_MATCHES}",
                                "operator": "NOT_MATCHES_REGEX",
                                "formulaid": "D"
                            },
                            {
                                "macro": "{#FSNAME}",
                                "value": "{$VFS.FS.FSDEVICE.MATCHES}",
                                "operator": "MATCHES_REGEX",
                                "formulaid": "E"
                            },
                            {
                                "macro": "{#FSDEVICE}",
                                "value": "{$VFS.FS.FSDEVICE.NOT_MATCHES}",
                                "operator": "NOT_MATCHES_REGEX",
                                "formulaid": "F"
                            }
                        ]
                    },
                    "items": [
                        //vfs.fs.free is required to calculate vfs.fs.used
                        {
                            "_resource": "{#FSNAME}",
                            "application_prototype": "Filesystem __RESOURCE__",
                            "_prototype": "vfs.fs.free",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "vfs.fs.free[node_exporter,\"{#FSNAME}\"]",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "{__name__=~\"^node_filesystem_avail(?:_bytes)?$\", mountpoint=\"{#FSNAME}\"}\r\n"
                                }
                            ]
                        },
                        {
                            "_resource": "{#FSNAME}",
                            "application_prototype": "Filesystem __RESOURCE__",
                            "_prototype": "vfs.fs.total",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "vfs.fs.total[node_exporter,\"{#FSNAME}\"]",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "{__name__=~\"^node_filesystem_size(?:_bytes)?$\", mountpoint=\"{#FSNAME}\"}\r\n"
                                }
                            ]
                        },
                        {
                            "_resource": "{#FSNAME}",
                            "application_prototype": "Filesystem __RESOURCE__",
                            "_prototype": "vfs.fs.used",
                            "type": "CALCULATED",
                            "key": "vfs.fs.used[node_exporter,\"{#FSNAME}\"]",
                            "value_type": "FLOAT"
                        },
                        {
                            "_resource": "{#FSNAME}",
                            "application_prototype": "Filesystem __RESOURCE__",
                            "_prototype": "vfs.fs.pused",
                            "type": "CALCULATED",
                            "key": "vfs.fs.pused[node_exporter,\"{#FSNAME}\"]",
                            "value_type": "FLOAT"
                        },
                        {
                            "_resource": "{#FSNAME}",
                            "application_prototype": "Filesystem __RESOURCE__",
                            "_prototype": "vfs.fs.inode.pfree",
                            "key": "vfs.fs.inode.pfree[node_exporter,\"{#FSNAME}\"]",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_TO_JSON",
                                    "params": "{__name__=~\"node_filesystem_files.*\",mountpoint=\"{#FSNAME}\"}"
                                },
                                {
                                    "type": "JAVASCRIPT",
                                    "params": "//count vfs.fs.inode.pfree\nvar inode_free;\nvar inode_total;\nJSON.parse(value).forEach(function(metric) {\n  if (metric['name'] == 'node_filesystem_files'){\n      inode_total = metric['value'];\n  } else if (metric['name'] == 'node_filesystem_files_free'){\n      inode_free = metric['value'];\n  }\n});\nreturn (inode_free/inode_total)*100;"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Block devices discovery",
                    "key": "vfs.dev.discovery[node_exporter]",
                    "master_item": "node_exporter.get",
                    "type": "DEPENDENT",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "node_disk_io_now{device=~\".+\"}"
                        }
                    ],
                    "lld_macro_paths": [
                        {
                            "lld_macro": "{#DEVNAME}",
                            "path": "$.labels.device"
                        },
                        {
                            "lld_macro": "{#HELP}",
                            "path": "$.help"
                        }
                    ],
                    "filter": {
                        "evaltype": "AND",
                        "conditions": [
                            {
                                "macro": "{#DEVNAME}",
                                "value": "{$VFS.DEV.DEVNAME.MATCHES}",
                                "operator": "MATCHES_REGEX",
                                "formulaid": "A"
                            },
                            {
                                "macro": "{#DEVNAME}",
                                "value": "{$VFS.DEV.DEVNAME.NOT_MATCHES}",
                                "operator": "NOT_MATCHES_REGEX",
                                "formulaid": "B"
                            }
                        ]
                    },
                    "items": [
                        {
                            "_resource": "{#DEVNAME}",
                            "application_prototype": "Disk __RESOURCE__",
                            "_prototype": "vfs.dev.read.rate",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "vfs.dev.read.rate[node_exporter,\"{#DEVNAME}\"]",
                            "value_type": "FLOAT",
                            "units": "!r/s",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_disk_reads_completed_total{device=\"{#DEVNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ],
                            "description": "r/s. The number (after merges) of read requests completed per second for the device."
                        },
                        {
                            "_resource": "{#DEVNAME}",
                            "application_prototype": "Disk __RESOURCE__",
                            "_prototype": "vfs.dev.write.rate",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "vfs.dev.write.rate[node_exporter,\"{#DEVNAME}\"]",
                            "value_type": "FLOAT",
                            "units": "!w/s",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_disk_writes_completed_total{device=\"{#DEVNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ],
                            "description": "w/s. The number (after merges) of write requests completed per second for the device."
                        },
                        {
                            "_resource": "{#DEVNAME}",
                            //"application_prototype": "Disk __RESOURCE__",
                            "_group": "Zabbix_raw_items",
                            "_prototype": "vfs.dev.read.time.rate",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "vfs.dev.read.time.rate[node_exporter,\"{#DEVNAME}\"]",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_disk_read_time_seconds_total{device=\"{#DEVNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ],
                            "description": "Rate of total read time counter. Used in r_await calculation"
                        },
                        {
                            "_resource": "{#DEVNAME}",
                            //"application_prototype": "Disk __RESOURCE__",
                            "_group": "Zabbix_raw_items",
                            "_prototype": "vfs.dev.write.time.rate",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "key": "vfs.dev.write.time.rate[node_exporter,\"{#DEVNAME}\"]",
                            "value_type": "FLOAT",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_disk_write_time_seconds_total{device=\"{#DEVNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ],
                            "description": "Rate of total write time counter. Used in w_await calculation"
                        },
                        {
                            "_resource": "{#DEVNAME}",
                            "_prototype": "vfs.dev.read.await",
                            "key": "vfs.dev.read.await[node_exporter,\"{#DEVNAME}\"]",
                            "application_prototype": "Disk __RESOURCE__",
                            "type": "CALCULATED",
                            "expression_formula": "(last(\"__vfs.dev.read.time.rate__\")/(last(\"__vfs.dev.read.rate__\")+(last(\"__vfs.dev.read.rate__\")=0)))*1000*(last(\"__vfs.dev.read.rate__\") > 0)",
                            "description": "This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception."
                        },
                        {
                            "_resource": "{#DEVNAME}",
                            "_prototype": "vfs.dev.write.await",
                            "key": "vfs.dev.write.await[node_exporter,\"{#DEVNAME}\"]",
                            "application_prototype": "Disk __RESOURCE__",
                            "type": "CALCULATED",
                            "expression_formula": "(last(\"__vfs.dev.write.time.rate__\")/(last(\"__vfs.dev.write.rate__\")+(last(\"__vfs.dev.write.rate__\")=0)))*1000*(last(\"__vfs.dev.write.rate__\") > 0)",
                            "description": "This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception."
                        },
                        {
                            "_resource": "{#DEVNAME}",
                            "_prototype": "vfs.dev.queue_size",
                            "key": "vfs.dev.queue_size[node_exporter,\"{#DEVNAME}\"]",
                            "application_prototype": "Disk __RESOURCE__",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_disk_io_time_weighted_seconds_total{device=\"{#DEVNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                }
                            ]
                        },
                        {
                            "_resource": "{#DEVNAME}",
                            "_prototype": "vfs.dev.util",
                            "key": "vfs.dev.util[node_exporter,\"{#DEVNAME}\"]",
                            "application_prototype": "Disk __RESOURCE__",
                            "type": "DEPENDENT",
                            "master_item": "node_exporter.get",
                            "preprocessing": [
                                {
                                    "type": "PROMETHEUS_PATTERN",
                                    "params": "node_disk_io_time_seconds_total{device=\"{#DEVNAME}\"}\r\n"
                                },
                                {
                                    "type": "CHANGE_PER_SECOND"
                                },
                                {
                                    "type": "MULTIPLIER",
                                    "params": "100"
                                }
                            ],
                            "triggers": []
                        }
                    ]
                }
            ],
            "items": [
                //get node exporter
                {
                    "_id": "node_exporter.get",
                    "key": "node_exporter.get",
                    "update": "1m",
                    "name": "Get node_exporter metrics",
                    "_group": "Zabbix_raw_items",
                    "history": "1h",
                    "trends": "0",
                    "type": "HTTP_AGENT",
                    "value_type": "TEXT",
                    "url": "http://{HOST.CONN}:{$NODE_EXPORTER_PORT}/metrics"
                },
                //uptime
                {
                    "_prototype": "system.uptime",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.uptime[node_exporter]",
                    "name": "System uptime",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "{__name__=~\"^node_boot_time(?:_seconds)?$\"}\r\n"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//use boottime to calculate uptime\r\nreturn (Math.floor(Date.now()/1000)-Number(value));"
                        }
                    ],
                    "triggers": [
                        {
                            "_prototype": "trigger.uptime.restarted",
                            "priority": "WARNING",
                            "name": "{HOST.NAME} has been restarted (uptime < 10m)",
                            "description": "The device uptime is less than 10 minutes",
                            // "_depends_on": [
                            //     "nosnmp"
                            // ]
                        }
                    ]
                },
                //CPU
                {
                    "_prototype": "system.cpu.load.avg1",
                    "key": "system.cpu.load.avg1[node_exporter]",
                    "name": "Load average (1m avg)",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "node_load1\r\n"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.load.avg5",
                    "key": "system.cpu.load.avg5[node_exporter]",
                    "name": "Load average (5m avg)",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "node_load5\r\n"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.load.avg15",
                    "key": "system.cpu.load.avg15[node_exporter]",
                    "name": "Load average (15m avg)",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "node_load15\r\n"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.num",
                    "key": "system.cpu.num[node_exporter]",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"idle\"}"
                        },
                        {
                            //change to advanced jsonpath
                            "type": "JAVASCRIPT",
                            "params": "//count the number of cores\r\nreturn JSON.parse(value).length\r\n"
                        }
                    ]
                },
                //CPU modes
                {
                    "_prototype": "system.cpu.util",
                    "type": "DEPENDENT",
                    "master_item": "system.cpu.idle",
                    "key": "system.cpu.util[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "JAVASCRIPT",
                            "params": "//Calculate utilization\nreturn (100 - value)"
                        },
                    ]
                },
                {
                    "_prototype": "system.cpu.idle",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.idle[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"idle\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.system",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.system[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"system\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.user",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.user[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"user\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.steal",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.steal[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"steal\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.softirq",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.softirq[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"softirq\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.nice",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.nice[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"nice\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.iowait",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.iowait[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"iowait\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.interrupt",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.interrupt[node_exporter]",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_seconds_total)?$\",cpu=~\".+\",mode=\"irq\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.guest",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.guest[node_exporter]",
                    // this metric is only supported for 0.16.0 or above
                    // node_cpu{cpu=""cpu0"",mode="guest"} 0 (pre 0.16.0)
                    // node_cpu_guest_seconds_total{cpu="1",mode="user"} 0 (after 0.16.0)
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_guest_seconds_total)?$\",cpu=~\".+\",mode=~\"^(?:user|guest)$\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.guest_nice",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "key": "system.cpu.guest_nice[node_exporter]",
                    // this metric is only supported for 0.16.0 or above
                    // node_cpu{cpu=""cpu0"",mode="guest_nice} 0 (pre 0.16.0)
                    // node_cpu_guest_seconds_total{cpu="1",mode="nice"} 0 (after 0.16.0)
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_TO_JSON",
                            "params": "{__name__=~\"^node_cpu(?:_guest_seconds_total)?$\",cpu=~\".+\",mode=~\"^(?:nice|guest_nice)$\"}"
                        },
                        {
                            "type": "JAVASCRIPT",
                            "params": "//calculates average, all cpu utilization\nvar valueArr = JSON.parse(value);\nreturn valueArr.reduce(function(acc,obj){\n   return acc + parseFloat(obj['value'])\n},0)/valueArr.length;"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        },
                        {
                            "type": "MULTIPLIER",
                            "params": "100"
                        }
                    ]
                },
                //"jumps", context switches and interrupts
                {
                    "_prototype": "system.cpu.intr",
                    "key": "system.cpu.intr[node_exporter]",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "{__name__=~\"node_intr\"}\r\n"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        }
                    ]
                },
                {
                    "_prototype": "system.cpu.switches",
                    "key": "system.cpu.switches[node_exporter]",
                    "type": "DEPENDENT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "{__name__=~\"node_context_switches\"}\r\n"
                        },
                        {
                            "type": "CHANGE_PER_SECOND"
                        }
                    ]
                },
                //MEMORY
                {
                    "_prototype": "vm.memory.util",
                    "type": "CALCULATED",
                    "key": "vm.memory.util[node_exporter]",
                    "params": "(last(\"__vm.memory.total__\")-last(\"__vm.memory.available__\"))/last(\"__vm.memory.total__\")*100",
                    "_vendor_description": "Memory used percentage is calculated as (total-available)/total*100"
                },
                {
                    "_prototype": "vm.memory.total",
                    "key": "vm.memory.total[node_exporter]",
                    "type": "DEPENDENT",
                    "value_type": "FLOAT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "{__name__=~\"node_memory_MemTotal\"}\r\n"
                        }
                    ]
                },
                {
                    "_prototype": "vm.memory.available",
                    "key": "vm.memory.available[node_exporter]",
                    "type": "DEPENDENT",
                    "value_type": "FLOAT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "{__name__=~\"node_memory_MemAvailable\"}\r\n"
                        }
                    ]
                },
                //SWAP
                {
                    "_prototype": "system.swap.total",
                    "key": "system.swap.total[node_exporter]",
                    "type": "DEPENDENT",
                    "value_type": "FLOAT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "{__name__=~\"node_memory_SwapTotal\"}\r\n"
                        }
                    ]
                },
                {
                    "_prototype": "system.swap.free",
                    "key": "system.swap.free[node_exporter]",
                    "type": "DEPENDENT",
                    "value_type": "FLOAT",
                    "master_item": "node_exporter.get",
                    "preprocessing": [
                        {
                            "type": "PROMETHEUS_PATTERN",
                            "params": "{__name__=~\"node_memory_SwapFree\"}\r\n"
                        }
                    ]
                },
                {
                    "_prototype": "system.swap.pfree",
                    "type": "CALCULATED",
                    "key": "system.swap.pfree[node_exporter]"
                }
            ],
            "screens": [
                {
                    "name": "System performance",
                    "hsize": 2,
                    "vsize": 4,
                    "screen_items": [
                        {
                            "resourcetype": "GRAPH",
                            "resource": [
                                {
                                    "name": "System load"
                                }
                            ],
                            "x": 0,
                            "y": 0
                        },
                        {
                            "resourcetype": "GRAPH",
                            "resource": [
                                {
                                    "name": "CPU usage"
                                }
                            ],
                            "x": 1,
                            "y": 0
                        },
                        {
                            "resourcetype": "GRAPH",
                            "resource": [
                                {
                                    "name": "Memory usage"
                                }
                            ],
                            "x": 0,
                            "y": 1
                        }
                    ]
                },
                {
                    "hsize": 1,
                    "vsize": 1,
                    "name": "Network interfaces",
                    "screen_items": [
                        {
                            "_graph_id": "net.if.stats"
                        }
                    ]
                }
            ]
        }
    ],
    "value_maps": [
        {
            "name": "IF-MIB::ifOperStatus",
            "mappings": [
                {
                    "value": "1",
                    "newvalue": "up"
                },
                {
                    "value": "2",
                    "newvalue": "down"
                },
                {
                    "value": "4",
                    "newvalue": "unknown"
                },
                {
                    "value": "5",
                    "newvalue": "dormant"
                },
                {
                    "value": "6",
                    "newvalue": "notPresent"
                },
                {
                    "value": "7",
                    "newvalue": "lowerLayerDown"
                }
            ]
        },
        {
            "name": "Linux::Interface protocol types",
            "mappings": [
                //https://github.com/torvalds/linux/blob/master/include/uapi/linux/if_arp.h
                /* ARP protocol HARDWARE identifiers. */
                {
                    "value": "0",
                    "newvalue": "from KA9Q: NET/ROM pseudo"
                },
                {
                    "value": "1",
                    "newvalue": "Ethernet 10Mbps"
                },
                {
                    "value": "2",
                    "newvalue": "Experimental Ethernet"
                },
                {
                    "value": "3",
                    "newvalue": "AX.25 Level 2"
                },
                {
                    "value": "4",
                    "newvalue": "PROnet token ring"
                },
                {
                    "value": "5",
                    "newvalue": "Chaosnet"
                },
                {
                    "value": "6",
                    "newvalue": "IEEE 802.2 Ethernet/TR/TB"
                },
                {
                    "value": "7",
                    "newvalue": "ARCnet"
                },
                {
                    "value": "8",
                    "newvalue": "APPLEtalk"
                },
                {
                    "value": "15",
                    "newvalue": "Frame Relay DLCI"
                },
                {
                    "value": "19",
                    "newvalue": "ATM"
                },
                {
                    "value": "23",
                    "newvalue": "Metricom STRIP (new IANA id)"
                },
                {
                    "value": "24",
                    "newvalue": "IEEE 1394 IPv4 - RFC 2734"
                },
                {
                    "value": "27",
                    "newvalue": "EUI-64"
                },
                {
                    "value": "32",
                    "newvalue": "InfiniBand"
                },
                {
                    "value": "256",
                    "newvalue": "ARPHRD_SLIP"
                },
                {
                    "value": "257",
                    "newvalue": "ARPHRD_CSLIP"
                },
                {
                    "value": "258",
                    "newvalue": "ARPHRD_SLIP6"
                },
                {
                    "value": "259",
                    "newvalue": "ARPHRD_CSLIP6"
                },
                {
                    "value": "260",
                    "newvalue": "Notional KISS type"
                },
                {
                    "value": "264",
                    "newvalue": "ARPHRD_ADAPT"
                },
                {
                    "value": "270",
                    "newvalue": "ARPHRD_ROSE"
                },
                {
                    "value": "271",
                    "newvalue": "CCITT X.25"
                },
                {
                    "value": "272",
                    "newvalue": "Boards with X.25 in firmware"
                },
                {
                    "value": "280",
                    "newvalue": "Controller Area Network"
                },
                {
                    "value": "512",
                    "newvalue": "ARPHRD_PPP"
                },
                {
                    "value": "513",
                    "newvalue": "Cisco HDLC"
                },
                {
                    "value": "516",
                    "newvalue": "LAPB"
                },
                {
                    "value": "517",
                    "newvalue": "Digital's DDCMP protocol"
                },
                {
                    "value": "518",
                    "newvalue": "Raw HDLC"
                },
                {
                    "value": "519",
                    "newvalue": "Raw IP"
                },
                {
                    "value": "768",
                    "newvalue": "IPIP tunnel"
                },
                {
                    "value": "769",
                    "newvalue": "IP6IP6 tunnel"
                },
                {
                    "value": "770",
                    "newvalue": "Frame Relay Access Device"
                },
                {
                    "value": "771",
                    "newvalue": "SKIP vif"
                },
                {
                    "value": "772",
                    "newvalue": "Loopback device"
                },
                {
                    "value": "773",
                    "newvalue": "Localtalk device"
                },
                {
                    "value": "774",
                    "newvalue": "Fiber Distributed Data Interface"
                },
                {
                    "value": "775",
                    "newvalue": "AP1000 BIF"
                },
                {
                    "value": "776",
                    "newvalue": "sit0 device - IPv6-in-IPv4"
                },
                {
                    "value": "777",
                    "newvalue": "IP over DDP tunneller"
                },
                {
                    "value": "778",
                    "newvalue": "GRE over IP"
                },
                {
                    "value": "779",
                    "newvalue": "PIMSM register interface"
                },
                {
                    "value": "780",
                    "newvalue": "High Performance Parallel Interface"
                },
                {
                    "value": "781",
                    "newvalue": "Nexus 64Mbps Ash"
                },
                {
                    "value": "782",
                    "newvalue": "Acorn Econet"
                },
                {
                    "value": "783",
                    "newvalue": "Linux-IrDA"
                },
                {
                    "value": "784",
                    "newvalue": "Point to point fibrechannel"
                },
                {
                    "value": "785",
                    "newvalue": "Fibrechannel arbitrated loop"
                },
                {
                    "value": "786",
                    "newvalue": "Fibrechannel public loop"
                },
                {
                    "value": "787",
                    "newvalue": "Fibrechannel fabric"
                },
                /* 787->799 reserved for fibrechannel media types */
                {
                    "value": "800",
                    "newvalue": "Magic type ident for TR"
                },
                {
                    "value": "801",
                    "newvalue": "IEEE 802.11"
                },
                {
                    "value": "802",
                    "newvalue": "IEEE 802.11 + Prism2 header"
                },
                {
                    "value": "803",
                    "newvalue": "IEEE 802.11 + radiotap header"
                },
                {
                    "value": "804",
                    "newvalue": "ARPHRD_IEEE802154"
                },
                {
                    "value": "805",
                    "newvalue": "IEEE 802.15.4 network monitor"
                },
                {
                    "value": "820",
                    "newvalue": "PhoNet media type"
                },
                {
                    "value": "821",
                    "newvalue": "PhoNet pipe header"
                },
                {
                    "value": "822",
                    "newvalue": "CAIF media type"
                },
                {
                    "value": "823",
                    "newvalue": "GRE over IPv6"
                },
                {
                    "value": "824",
                    "newvalue": "Netlink header"
                },
                {
                    "value": "825",
                    "newvalue": "IPv6 over LoWPAN"
                },
                {
                    "value": "826",
                    "newvalue": "Vsock monitor header"
                }
            ]
        }
    ]
}